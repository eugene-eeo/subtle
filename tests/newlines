# allowed for now :)
Fn.new{|a| return;}

# should be able to break at operators
assert 1 +
    2 *
    3 == 7

for (
    i
    =
    1..10
    ) {

    # allow for trailing and leading whitespace.
    # at one point, this was a bug in the compiler.
    assert i == i

    # another one just to be sure.
    assert i == i

}

# newlines are ignored inside of the grouping brackets.
assert (
    1
    +
    2
    -
    -1
    *
    3
) == 6

let a
(
    a
    =
    1
    +
    2
)

let O = {}
O proto = O
assert O.
    proto.
    proto.
    proto == O

# mix and match dot/space-style access
assert (O
    proto # O
    .proto # O
    proto) == O

let x = {}
assert (x
    y
    = 5
    ) == 5
assert x y == 5

x a = Fn.new{|b|
    assert b == 1
    x seen = true
}
x a(
    1
)
assert x seen

# Newline handling inside an object:
let x = {
    u
    =
    Object
    .proto.proto,
    d = Object.proto.proto
}
assert x.u == Object.proto.proto
assert x.d == Object.proto.proto

let f = Fn new{|a, b, c|
    assert a == 1
    assert b == 2
    assert c == 3
}
f.call(
    1, 2,
    3
)
