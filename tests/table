# tests objects (specifically, the table implementation)

let x = {};
x.abc = 1;
x.def = 2;

assert x.abc == 1;
assert x.def == 2;

assert x.deleteSlot("ab") == x;
assert x.deleteSlot("abc") == x;
assert x.ab == nil;
assert x.abc == nil;
assert !x.hasOwnSlot("abc");

x.ghi = 3;
x.jkl = 4;
assert x.def == 2;
assert x.ghi == 3;
assert x.jkl == 4;

# also test more exotic stuff
x.+ = 1;      assert x.+ == 1;
x.- = 2;      assert x.- == 2;
x./ = 3;      assert x./ == 3;
x.* = 4;      assert x.* == 4;
x.| = 5;      assert x.| == 5;
x.& = 6;      assert x.& == 6;
x.== = 7;     assert x.== == 7;
x.!= = 8;     assert x.!= == 8;
x.<= = 9;     assert x.<= == 9;
x.>= = 10;    assert x.>= == 10;
x.< = 11;     assert x.< == 11;
x.> = 12;     assert x.> == 12;
x.true = 13;  assert x.true == 13;
x.false = 14; assert x.false == 14;
x.nil = 15;   assert x.nil == 15;
x.this = 16;  assert x.this == 16;

let seen;
x = {a=1, b=2, c=3};

# keys
seen = {};
for (key = x.keys)
    seen.rawSetSlot(key, 1);
assert seen.a == 1;
assert seen.b == 1;
assert seen.c == 1;

# values
seen = {};
for (key = x.values)
    seen.rawSetSlot(key, 1);
assert seen.getOwnSlot(1) == 1;
assert seen.getOwnSlot(2) == 1;
assert seen.getOwnSlot(3) == 1;
