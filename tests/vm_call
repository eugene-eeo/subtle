# Currently getSlot and setSlot use vm_call.
# We stress-test them below...

let setSlot = Object.rawGetSlot("setSlot");
let getSlot = Object.rawGetSlot("rawGetSlot");

let x = {};
let record = {};

x.getSlot = Fn.new{|k|
    let rv = getSlot.callWithThis(this, k);
    record.setSlot(k, "seen");
    return rv;
};

x.setSlot = Fn.new{|k, v|
    setSlot.callWithThis(this, k, v);
    return v;
};

assert x.z == nil;      # This should call getSlot
assert record.z == "seen";
assert (x.u = 2) == 2;  # This should call setSlot
assert x.u == 2;        # This should not call getSlot
assert record.u == nil;

let custom_getSlot = Fn.new{ |k|
    if (k == "k") return record.k;
    return getSlot.callWithThis(this, k);
};

assert (x.getSlot = custom_getSlot) == custom_getSlot;

record.k = 1;
assert x.k == 1;

record.k = 2;
assert x.k == 2;

assert x.getSlot("getSlot") == custom_getSlot;

# this is actually a since-fixed bug in run() that broke from
# the bytecode interpreter loop based on the function, not the
# stack frame depth.
let recursive;
recursive = Fn.new{|s, n|
    if (n == 1) return s;
    return s + recursive.call(s, n - 1);
};
let u = {};
u.getSlot = Fn.new{|s|
    return recursive.call(s, 3);
};

assert u.a == "aaa";
assert u.ab == "ababab";
