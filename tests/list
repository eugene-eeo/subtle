let list = List.new(1,2,3);
assert list.length == 3;
for (i in 0...list.length)
    assert list.get(i) == i + 1;

assert Object.same(list.set(1, 4), list);
assert list.get(1) == 4;

list.delete(1);
assert list.length == 2;
assert list.get(0) == 1;
assert list.get(1) == 3;

list.add(0);
assert list.length == 3;
assert list.get(0) == 1;
assert list.get(1) == 3;
assert list.get(2) == 0;

list.delete(-1);
assert list.length == 2;
assert list.get(0) == 1;
assert list.get(1) == 3;

list.add(list);
assert list.get(-1) == list;

List.== = Fn.new{|other|
    if (Object.same(this, other)) return true;
    if (this.length != other.length) return false;
    for (i in 0...this.length)
        if (this.get(i) != other.get(i))
            return false;
    return true;
};

assert List.new(1,2,3) == List.new(1,2,3);
assert List.new(1,2).insert(1, 3) == List.new(1, 3, 2);

list = List.new();
for (x in List.new(1,2,3))
    list.add(x);
assert list == List.new(1,2,3);

# Test compaction
list = List.new();
for (x in 1..100)
    list.add(x);
for (x in 1..100) {
    list.delete(-1);
    assert list.length == 100-x;
}
