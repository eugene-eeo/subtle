let listEq = Fn.new{|a, b|
    if (a.length != b.length) return false
    for (i in 0...a.length)
        if (a.get(i) != b.get(i))
            return false
    return true
}

let list = List.new(1,2,3)

assert Object.same(list.set(1, 4), list)
assert listEq.call(list, List.new(1, 4, 3))

list.delete(1);
assert listEq.call(list, List.new(1, 3))

list.add(0)
assert list.length == 3
assert listEq.call(list, List.new(1, 3, 0))

list.delete(-1);
assert listEq.call(list, List.new(1, 3))

# test a simple recursive ==
list.add(list);
assert listEq.call(list, List.new(1, 3, list))

assert listEq.call(List.new(1,2).insert(1, 3), List.new(1, 3, 2));

# Test compaction
list = List.new();
for (x in 1..100)
    list.add(x);
for (x in 1..100) {
    list.delete(-1);
    assert list.length == 100-x;
}
