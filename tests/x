# This file will contain several tests to exercise some aspects of
# the VM; it just serves as a file for regression tests.

# 93de905 stress test vm_push_frame
let x = {
    perform = Fn.new{|msg|
        if (msg.slotName == "mySlot") {
            assert msg.args.length == 0
        } else if (msg.slotName == "mySlot2") {
            assert msg.args.length == 1
        } else {
            assert false
        }
        return 1;
    }
}
# x getSlot("perform") println
assert x.mySlot     == 1
assert x.mySlot2(2) == 1

# stress test table delete
let k = 0
# earlier test fails around ~130
while (k < 500) {
    k = k + 1
    k toString
}

# this is actually a since-fixed bug in run() that broke from
# the bytecode interpreter loop based on the function, not the
# stack frame depth.
let recursive;
recursive = Fn.new{|s, n|
    if (n == 1) return s;
    return s + recursive.call(s, n - 1);
};
let u = {};
u toString = Fn.new{
    return recursive.call(1, 3) toString;
}
u println

# fixed a bug in Object.rawPerform that did not check if the
# values were callable.
assert (Fiber new {
    let obj = {}
    # this used to crash the vm.
    obj rawPerform("x", 1)
}) try != nil
