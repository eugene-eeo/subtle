[
Object :: call   [ self ]
Object :: call:_ [ self ]
Object :: ifTrue:f ifFalse:_ [ f call ]
Object :: != arg [ (self == arg) not ]

false proto :: ifTrue:_ ifFalse:f [ f call ]
nil proto   :: ifTrue:_ ifFalse:f [ f call ]

Ether :: if:x then:t        [ x ifTrue:t ifFalse:nil ]
Ether :: if:x then:t else:f [ x ifTrue:t ifFalse:f ]
Ether :: while:x do:f [
    if: (x call) then: [
        f call
        while: x do: f
    ]
]
Ether :: do:f while:x [
    f call
    if: (x call) then: [
        do: f while: x
    ]
]
Ether :: assert:f msg:y [ if: (f not) then: [ Fiber abort: y ] ]

MsgRaw := {}
MsgRaw :: perform:msg [ msg ]
Msg :: raw [
    return MsgRaw
]
] call
