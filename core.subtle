Fn.new{
Object.!= = Fn.new{|o| return ! (self == o) }
Object.println = Fn.new{
    self.print
    "\n".print
}

let Entry = {
    init = Fn new{|k, v|
        self key = k
        self value = v
    }
}

let MethodIterator = {
    init = Fn.new{|obj, slot|
        self._obj = obj
        self._slot = slot
        return self
    },
    iterMore = Fn.new{|v| return self._obj.rawIterMore(v) },
    iterNext = Fn.new{|v|
        return self._obj.
            getSlot(self._slot).
            callWith(self._obj, v)
    }
}

let fromSlot = Fn.new{|slot|
    return Fn.new{ return MethodIterator.new(self, slot) }
}

Object.rawEntryFromIndex = Fn.new{|i|
    return Entry new(
        self rawSlotAt(i),
        self rawValueAt(i)
    )
}

Map.rawEntryFromIndex = Fn.new{|i|
    return Entry new(
        self rawKeyAt(i),
        self rawValueAt(i)
    )
}

Object.slots   = fromSlot.call("rawSlotAt")
Object.values  = fromSlot.call("rawValueAt")
Object.entries = fromSlot.call("rawEntryFromIndex")
Map.keys       = fromSlot.call("rawSlotAt")
Map.values     = fromSlot.call("rawValueAt")
Map.entries    = fromSlot.call("rawEntryFromIndex")

List.fromIterator = Fn.new{|it|
    let list = List.new()
    for (item = it)
        list.add(item)
    return list
}
}.call
